// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UavStateMessage.proto

package com.ruoyi.web.pb;

/**
 * Protobuf type {@code com.ruoyi.web.pb.UavStateMessage}
 */
public  final class UavStateMessage extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:com.ruoyi.web.pb.UavStateMessage)
    UavStateMessageOrBuilder {
private static final long serialVersionUID = 0L;
  // Use UavStateMessage.newBuilder() to construct.
  private UavStateMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private UavStateMessage() {
    lng_ = 0D;
    lat_ = 0D;
    altitude_ = 0F;
    ultrasonic_ = 0F;
    pitch_ = 0F;
    roll_ = 0F;
    yaw_ = 0F;
    airspeed_ = 0F;
    velocity_ = 0F;
    timestamp_ = 0L;
    ptpitch_ = 0F;
    ptroll_ = 0F;
    ptyaw_ = 0F;
    zoomfactor_ = 0F;
    boxSn_ = "";
    batteryPower_ = "";
    satelliteCount_ = 0;
    taskId_ = 0L;
    rtkLng_ = 0D;
    rtkLat_ = 0D;
    rtkHFSL_ = 0F;
    rtkPositionInfo_ = 0;
    airFlyTimes_ = 0;
    airFlyDistance_ = 0F;
    uavSn_ = "";
    uavModel_ = "";
    homeRange_ = 0F;
    flightMode_ = 0;
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private UavStateMessage(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 9: {

            lng_ = input.readDouble();
            break;
          }
          case 17: {

            lat_ = input.readDouble();
            break;
          }
          case 29: {

            altitude_ = input.readFloat();
            break;
          }
          case 37: {

            ultrasonic_ = input.readFloat();
            break;
          }
          case 45: {

            pitch_ = input.readFloat();
            break;
          }
          case 53: {

            roll_ = input.readFloat();
            break;
          }
          case 61: {

            yaw_ = input.readFloat();
            break;
          }
          case 69: {

            airspeed_ = input.readFloat();
            break;
          }
          case 77: {

            velocity_ = input.readFloat();
            break;
          }
          case 80: {

            timestamp_ = input.readUInt64();
            break;
          }
          case 93: {

            ptpitch_ = input.readFloat();
            break;
          }
          case 101: {

            ptroll_ = input.readFloat();
            break;
          }
          case 109: {

            ptyaw_ = input.readFloat();
            break;
          }
          case 117: {

            zoomfactor_ = input.readFloat();
            break;
          }
          case 122: {
            String s = input.readStringRequireUtf8();

            boxSn_ = s;
            break;
          }
          case 130: {
            String s = input.readStringRequireUtf8();

            batteryPower_ = s;
            break;
          }
          case 136: {

            satelliteCount_ = input.readUInt32();
            break;
          }
          case 144: {

            taskId_ = input.readUInt64();
            break;
          }
          case 153: {

            rtkLng_ = input.readDouble();
            break;
          }
          case 161: {

            rtkLat_ = input.readDouble();
            break;
          }
          case 173: {

            rtkHFSL_ = input.readFloat();
            break;
          }
          case 176: {

            rtkPositionInfo_ = input.readUInt32();
            break;
          }
          case 184: {

            airFlyTimes_ = input.readUInt32();
            break;
          }
          case 197: {

            airFlyDistance_ = input.readFloat();
            break;
          }
          case 202: {
            String s = input.readStringRequireUtf8();

            uavSn_ = s;
            break;
          }
          case 210: {
            String s = input.readStringRequireUtf8();

            uavModel_ = s;
            break;
          }
          case 221: {

            homeRange_ = input.readFloat();
            break;
          }
          case 224: {

            flightMode_ = input.readUInt32();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return UavStateMessageOuterClass.internal_static_com_ruoyi_web_pb_UavStateMessage_descriptor;
  }

  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return UavStateMessageOuterClass.internal_static_com_ruoyi_web_pb_UavStateMessage_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            UavStateMessage.class, Builder.class);
  }

  public static final int LNG_FIELD_NUMBER = 1;
  private double lng_;
  /**
   * <pre>
   *经度
   * </pre>
   *
   * <code>double lng = 1;</code>
   */
  public double getLng() {
    return lng_;
  }

  public static final int LAT_FIELD_NUMBER = 2;
  private double lat_;
  /**
   * <pre>
   *纬度
   * </pre>
   *
   * <code>double lat = 2;</code>
   */
  public double getLat() {
    return lat_;
  }

  public static final int ALTITUDE_FIELD_NUMBER = 3;
  private float altitude_;
  /**
   * <pre>
   *海拔高度(椭球高)(单位:米)
   * </pre>
   *
   * <code>float altitude = 3;</code>
   */
  public float getAltitude() {
    return altitude_;
  }

  public static final int ULTRASONIC_FIELD_NUMBER = 4;
  private float ultrasonic_;
  /**
   * <pre>
   *相对高度(单位:米)
   * </pre>
   *
   * <code>float ultrasonic = 4;</code>
   */
  public float getUltrasonic() {
    return ultrasonic_;
  }

  public static final int PITCH_FIELD_NUMBER = 5;
  private float pitch_;
  /**
   * <pre>
   *俯仰角
   * </pre>
   *
   * <code>float pitch = 5;</code>
   */
  public float getPitch() {
    return pitch_;
  }

  public static final int ROLL_FIELD_NUMBER = 6;
  private float roll_;
  /**
   * <pre>
   *横滚角
   * </pre>
   *
   * <code>float roll = 6;</code>
   */
  public float getRoll() {
    return roll_;
  }

  public static final int YAW_FIELD_NUMBER = 7;
  private float yaw_;
  /**
   * <pre>
   *偏航角
   * </pre>
   *
   * <code>float yaw = 7;</code>
   */
  public float getYaw() {
    return yaw_;
  }

  public static final int AIRSPEED_FIELD_NUMBER = 8;
  private float airspeed_;
  /**
   * <pre>
   *空速(单位:米/秒)
   * </pre>
   *
   * <code>float airspeed = 8;</code>
   */
  public float getAirspeed() {
    return airspeed_;
  }

  public static final int VELOCITY_FIELD_NUMBER = 9;
  private float velocity_;
  /**
   * <pre>
   *地速(单位:米/秒)
   * </pre>
   *
   * <code>float velocity = 9;</code>
   */
  public float getVelocity() {
    return velocity_;
  }

  public static final int TIMESTAMP_FIELD_NUMBER = 10;
  private long timestamp_;
  /**
   * <pre>
   *时间戳
   * </pre>
   *
   * <code>uint64 timestamp = 10;</code>
   */
  public long getTimestamp() {
    return timestamp_;
  }

  public static final int PTPITCH_FIELD_NUMBER = 11;
  private float ptpitch_;
  /**
   * <pre>
   *载荷俯仰角
   * </pre>
   *
   * <code>float ptpitch = 11;</code>
   */
  public float getPtpitch() {
    return ptpitch_;
  }

  public static final int PTROLL_FIELD_NUMBER = 12;
  private float ptroll_;
  /**
   * <pre>
   *载荷横滚角
   * </pre>
   *
   * <code>float ptroll = 12;</code>
   */
  public float getPtroll() {
    return ptroll_;
  }

  public static final int PTYAW_FIELD_NUMBER = 13;
  private float ptyaw_;
  /**
   * <pre>
   *载荷航向角
   * </pre>
   *
   * <code>float ptyaw = 13;</code>
   */
  public float getPtyaw() {
    return ptyaw_;
  }

  public static final int ZOOMFACTOR_FIELD_NUMBER = 14;
  private float zoomfactor_;
  /**
   * <pre>
   *载荷当前倍数
   * </pre>
   *
   * <code>float zoomfactor = 14;</code>
   */
  public float getZoomfactor() {
    return zoomfactor_;
  }

  public static final int BOXSN_FIELD_NUMBER = 15;
  private volatile Object boxSn_;
  /**
   * <pre>
   *云盒子编号
   * </pre>
   *
   * <code>string boxSn = 15;</code>
   */
  public String getBoxSn() {
    Object ref = boxSn_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      boxSn_ = s;
      return s;
    }
  }
  /**
   * <pre>
   *云盒子编号
   * </pre>
   *
   * <code>string boxSn = 15;</code>
   */
  public com.google.protobuf.ByteString
      getBoxSnBytes() {
    Object ref = boxSn_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      boxSn_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int BATTERYPOWER_FIELD_NUMBER = 16;
  private volatile Object batteryPower_;
  /**
   * <pre>
   *电池电量,多个电池以下划线分割,如：80_60
   * </pre>
   *
   * <code>string batteryPower = 16;</code>
   */
  public String getBatteryPower() {
    Object ref = batteryPower_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      batteryPower_ = s;
      return s;
    }
  }
  /**
   * <pre>
   *电池电量,多个电池以下划线分割,如：80_60
   * </pre>
   *
   * <code>string batteryPower = 16;</code>
   */
  public com.google.protobuf.ByteString
      getBatteryPowerBytes() {
    Object ref = batteryPower_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      batteryPower_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SATELLITECOUNT_FIELD_NUMBER = 17;
  private int satelliteCount_;
  /**
   * <pre>
   *卫星计数
   * </pre>
   *
   * <code>uint32 satelliteCount = 17;</code>
   */
  public int getSatelliteCount() {
    return satelliteCount_;
  }

  public static final int TASKID_FIELD_NUMBER = 18;
  private long taskId_;
  /**
   * <pre>
   *任务编号
   * </pre>
   *
   * <code>uint64 taskId = 18;</code>
   */
  public long getTaskId() {
    return taskId_;
  }

  public static final int RTKLNG_FIELD_NUMBER = 19;
  private double rtkLng_;
  /**
   * <pre>
   *rtk经度
   * </pre>
   *
   * <code>double rtkLng = 19;</code>
   */
  public double getRtkLng() {
    return rtkLng_;
  }

  public static final int RTKLAT_FIELD_NUMBER = 20;
  private double rtkLat_;
  /**
   * <pre>
   *rtk纬度
   * </pre>
   *
   * <code>double rtkLat = 20;</code>
   */
  public double getRtkLat() {
    return rtkLat_;
  }

  public static final int RTKHFSL_FIELD_NUMBER = 21;
  private float rtkHFSL_;
  /**
   * <pre>
   *rtk海拔高度(平均海平面高度)(单位:米)
   * </pre>
   *
   * <code>float rtkHFSL = 21;</code>
   */
  public float getRtkHFSL() {
    return rtkHFSL_;
  }

  public static final int RTKPOSITIONINFO_FIELD_NUMBER = 22;
  private int rtkPositionInfo_;
  /**
   * <pre>
   *rtk状态(值为50时[rtk数据fix固定解]，rtk的经纬度及海拔高度值可用)
   * </pre>
   *
   * <code>uint32 rtkPositionInfo = 22;</code>
   */
  public int getRtkPositionInfo() {
    return rtkPositionInfo_;
  }

  public static final int AIRFLYTIMES_FIELD_NUMBER = 23;
  private int airFlyTimes_;
  /**
   * <pre>
   *当前架次飞行时长(单位:秒)
   * </pre>
   *
   * <code>uint32 airFlyTimes = 23;</code>
   */
  public int getAirFlyTimes() {
    return airFlyTimes_;
  }

  public static final int AIRFLYDISTANCE_FIELD_NUMBER = 24;
  private float airFlyDistance_;
  /**
   * <pre>
   *当前架次飞行实际距离(单位:米)
   * </pre>
   *
   * <code>float airFlyDistance = 24;</code>
   */
  public float getAirFlyDistance() {
    return airFlyDistance_;
  }

  public static final int UAVSN_FIELD_NUMBER = 25;
  private volatile Object uavSn_;
  /**
   * <pre>
   *无人机编号
   * </pre>
   *
   * <code>string uavSn = 25;</code>
   */
  public String getUavSn() {
    Object ref = uavSn_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      uavSn_ = s;
      return s;
    }
  }
  /**
   * <pre>
   *无人机编号
   * </pre>
   *
   * <code>string uavSn = 25;</code>
   */
  public com.google.protobuf.ByteString
      getUavSnBytes() {
    Object ref = uavSn_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      uavSn_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int UAVMODEL_FIELD_NUMBER = 26;
  private volatile Object uavModel_;
  /**
   * <pre>
   *无人机型号
   * </pre>
   *
   * <code>string uavModel = 26;</code>
   */
  public String getUavModel() {
    Object ref = uavModel_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      uavModel_ = s;
      return s;
    }
  }
  /**
   * <pre>
   *无人机型号
   * </pre>
   *
   * <code>string uavModel = 26;</code>
   */
  public com.google.protobuf.ByteString
      getUavModelBytes() {
    Object ref = uavModel_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      uavModel_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int HOMERANGE_FIELD_NUMBER = 27;
  private float homeRange_;
  /**
   * <pre>
   *距降落点距离(单位:米)
   * </pre>
   *
   * <code>float homeRange = 27;</code>
   */
  public float getHomeRange() {
    return homeRange_;
  }

  public static final int FLIGHTMODE_FIELD_NUMBER = 28;
  private int flightMode_;
  /**
   * <pre>
   *飞行模式：1=手动控制模式，2=姿态模式，6=MODE_P_GPS，9=热点任务中，11=自动起飞中，12=降落中，14=航线中，15=返航中，17=虚拟摇杆控制中，33=强制降落中，41=解锁电机准备起飞中
   * </pre>
   *
   * <code>uint32 flightMode = 28;</code>
   */
  public int getFlightMode() {
    return flightMode_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (lng_ != 0D) {
      output.writeDouble(1, lng_);
    }
    if (lat_ != 0D) {
      output.writeDouble(2, lat_);
    }
    if (altitude_ != 0F) {
      output.writeFloat(3, altitude_);
    }
    if (ultrasonic_ != 0F) {
      output.writeFloat(4, ultrasonic_);
    }
    if (pitch_ != 0F) {
      output.writeFloat(5, pitch_);
    }
    if (roll_ != 0F) {
      output.writeFloat(6, roll_);
    }
    if (yaw_ != 0F) {
      output.writeFloat(7, yaw_);
    }
    if (airspeed_ != 0F) {
      output.writeFloat(8, airspeed_);
    }
    if (velocity_ != 0F) {
      output.writeFloat(9, velocity_);
    }
    if (timestamp_ != 0L) {
      output.writeUInt64(10, timestamp_);
    }
    if (ptpitch_ != 0F) {
      output.writeFloat(11, ptpitch_);
    }
    if (ptroll_ != 0F) {
      output.writeFloat(12, ptroll_);
    }
    if (ptyaw_ != 0F) {
      output.writeFloat(13, ptyaw_);
    }
    if (zoomfactor_ != 0F) {
      output.writeFloat(14, zoomfactor_);
    }
    if (!getBoxSnBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 15, boxSn_);
    }
    if (!getBatteryPowerBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 16, batteryPower_);
    }
    if (satelliteCount_ != 0) {
      output.writeUInt32(17, satelliteCount_);
    }
    if (taskId_ != 0L) {
      output.writeUInt64(18, taskId_);
    }
    if (rtkLng_ != 0D) {
      output.writeDouble(19, rtkLng_);
    }
    if (rtkLat_ != 0D) {
      output.writeDouble(20, rtkLat_);
    }
    if (rtkHFSL_ != 0F) {
      output.writeFloat(21, rtkHFSL_);
    }
    if (rtkPositionInfo_ != 0) {
      output.writeUInt32(22, rtkPositionInfo_);
    }
    if (airFlyTimes_ != 0) {
      output.writeUInt32(23, airFlyTimes_);
    }
    if (airFlyDistance_ != 0F) {
      output.writeFloat(24, airFlyDistance_);
    }
    if (!getUavSnBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 25, uavSn_);
    }
    if (!getUavModelBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 26, uavModel_);
    }
    if (homeRange_ != 0F) {
      output.writeFloat(27, homeRange_);
    }
    if (flightMode_ != 0) {
      output.writeUInt32(28, flightMode_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (lng_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(1, lng_);
    }
    if (lat_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(2, lat_);
    }
    if (altitude_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(3, altitude_);
    }
    if (ultrasonic_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(4, ultrasonic_);
    }
    if (pitch_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(5, pitch_);
    }
    if (roll_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(6, roll_);
    }
    if (yaw_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(7, yaw_);
    }
    if (airspeed_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(8, airspeed_);
    }
    if (velocity_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(9, velocity_);
    }
    if (timestamp_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(10, timestamp_);
    }
    if (ptpitch_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(11, ptpitch_);
    }
    if (ptroll_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(12, ptroll_);
    }
    if (ptyaw_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(13, ptyaw_);
    }
    if (zoomfactor_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(14, zoomfactor_);
    }
    if (!getBoxSnBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(15, boxSn_);
    }
    if (!getBatteryPowerBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(16, batteryPower_);
    }
    if (satelliteCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(17, satelliteCount_);
    }
    if (taskId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(18, taskId_);
    }
    if (rtkLng_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(19, rtkLng_);
    }
    if (rtkLat_ != 0D) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(20, rtkLat_);
    }
    if (rtkHFSL_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(21, rtkHFSL_);
    }
    if (rtkPositionInfo_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(22, rtkPositionInfo_);
    }
    if (airFlyTimes_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(23, airFlyTimes_);
    }
    if (airFlyDistance_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(24, airFlyDistance_);
    }
    if (!getUavSnBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(25, uavSn_);
    }
    if (!getUavModelBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(26, uavModel_);
    }
    if (homeRange_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(27, homeRange_);
    }
    if (flightMode_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(28, flightMode_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof UavStateMessage)) {
      return super.equals(obj);
    }
    UavStateMessage other = (UavStateMessage) obj;

    boolean result = true;
    result = result && (
        Double.doubleToLongBits(getLng())
        == Double.doubleToLongBits(
            other.getLng()));
    result = result && (
        Double.doubleToLongBits(getLat())
        == Double.doubleToLongBits(
            other.getLat()));
    result = result && (
        Float.floatToIntBits(getAltitude())
        == Float.floatToIntBits(
            other.getAltitude()));
    result = result && (
        Float.floatToIntBits(getUltrasonic())
        == Float.floatToIntBits(
            other.getUltrasonic()));
    result = result && (
        Float.floatToIntBits(getPitch())
        == Float.floatToIntBits(
            other.getPitch()));
    result = result && (
        Float.floatToIntBits(getRoll())
        == Float.floatToIntBits(
            other.getRoll()));
    result = result && (
        Float.floatToIntBits(getYaw())
        == Float.floatToIntBits(
            other.getYaw()));
    result = result && (
        Float.floatToIntBits(getAirspeed())
        == Float.floatToIntBits(
            other.getAirspeed()));
    result = result && (
        Float.floatToIntBits(getVelocity())
        == Float.floatToIntBits(
            other.getVelocity()));
    result = result && (getTimestamp()
        == other.getTimestamp());
    result = result && (
        Float.floatToIntBits(getPtpitch())
        == Float.floatToIntBits(
            other.getPtpitch()));
    result = result && (
        Float.floatToIntBits(getPtroll())
        == Float.floatToIntBits(
            other.getPtroll()));
    result = result && (
        Float.floatToIntBits(getPtyaw())
        == Float.floatToIntBits(
            other.getPtyaw()));
    result = result && (
        Float.floatToIntBits(getZoomfactor())
        == Float.floatToIntBits(
            other.getZoomfactor()));
    result = result && getBoxSn()
        .equals(other.getBoxSn());
    result = result && getBatteryPower()
        .equals(other.getBatteryPower());
    result = result && (getSatelliteCount()
        == other.getSatelliteCount());
    result = result && (getTaskId()
        == other.getTaskId());
    result = result && (
        Double.doubleToLongBits(getRtkLng())
        == Double.doubleToLongBits(
            other.getRtkLng()));
    result = result && (
        Double.doubleToLongBits(getRtkLat())
        == Double.doubleToLongBits(
            other.getRtkLat()));
    result = result && (
        Float.floatToIntBits(getRtkHFSL())
        == Float.floatToIntBits(
            other.getRtkHFSL()));
    result = result && (getRtkPositionInfo()
        == other.getRtkPositionInfo());
    result = result && (getAirFlyTimes()
        == other.getAirFlyTimes());
    result = result && (
        Float.floatToIntBits(getAirFlyDistance())
        == Float.floatToIntBits(
            other.getAirFlyDistance()));
    result = result && getUavSn()
        .equals(other.getUavSn());
    result = result && getUavModel()
        .equals(other.getUavModel());
    result = result && (
        Float.floatToIntBits(getHomeRange())
        == Float.floatToIntBits(
            other.getHomeRange()));
    result = result && (getFlightMode()
        == other.getFlightMode());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + LNG_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        Double.doubleToLongBits(getLng()));
    hash = (37 * hash) + LAT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        Double.doubleToLongBits(getLat()));
    hash = (37 * hash) + ALTITUDE_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getAltitude());
    hash = (37 * hash) + ULTRASONIC_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getUltrasonic());
    hash = (37 * hash) + PITCH_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getPitch());
    hash = (37 * hash) + ROLL_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getRoll());
    hash = (37 * hash) + YAW_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getYaw());
    hash = (37 * hash) + AIRSPEED_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getAirspeed());
    hash = (37 * hash) + VELOCITY_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getVelocity());
    hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTimestamp());
    hash = (37 * hash) + PTPITCH_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getPtpitch());
    hash = (37 * hash) + PTROLL_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getPtroll());
    hash = (37 * hash) + PTYAW_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getPtyaw());
    hash = (37 * hash) + ZOOMFACTOR_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getZoomfactor());
    hash = (37 * hash) + BOXSN_FIELD_NUMBER;
    hash = (53 * hash) + getBoxSn().hashCode();
    hash = (37 * hash) + BATTERYPOWER_FIELD_NUMBER;
    hash = (53 * hash) + getBatteryPower().hashCode();
    hash = (37 * hash) + SATELLITECOUNT_FIELD_NUMBER;
    hash = (53 * hash) + getSatelliteCount();
    hash = (37 * hash) + TASKID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTaskId());
    hash = (37 * hash) + RTKLNG_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        Double.doubleToLongBits(getRtkLng()));
    hash = (37 * hash) + RTKLAT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        Double.doubleToLongBits(getRtkLat()));
    hash = (37 * hash) + RTKHFSL_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getRtkHFSL());
    hash = (37 * hash) + RTKPOSITIONINFO_FIELD_NUMBER;
    hash = (53 * hash) + getRtkPositionInfo();
    hash = (37 * hash) + AIRFLYTIMES_FIELD_NUMBER;
    hash = (53 * hash) + getAirFlyTimes();
    hash = (37 * hash) + AIRFLYDISTANCE_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getAirFlyDistance());
    hash = (37 * hash) + UAVSN_FIELD_NUMBER;
    hash = (53 * hash) + getUavSn().hashCode();
    hash = (37 * hash) + UAVMODEL_FIELD_NUMBER;
    hash = (53 * hash) + getUavModel().hashCode();
    hash = (37 * hash) + HOMERANGE_FIELD_NUMBER;
    hash = (53 * hash) + Float.floatToIntBits(
        getHomeRange());
    hash = (37 * hash) + FLIGHTMODE_FIELD_NUMBER;
    hash = (53 * hash) + getFlightMode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static UavStateMessage parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static UavStateMessage parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static UavStateMessage parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static UavStateMessage parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static UavStateMessage parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static UavStateMessage parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static UavStateMessage parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static UavStateMessage parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static UavStateMessage parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static UavStateMessage parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static UavStateMessage parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static UavStateMessage parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(UavStateMessage prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code com.ruoyi.web.pb.UavStateMessage}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:com.ruoyi.web.pb.UavStateMessage)
      UavStateMessageOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return UavStateMessageOuterClass.internal_static_com_ruoyi_web_pb_UavStateMessage_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return UavStateMessageOuterClass.internal_static_com_ruoyi_web_pb_UavStateMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              UavStateMessage.class, Builder.class);
    }

    // Construct using com.ruoyi.web.pb.UavStateMessage.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      lng_ = 0D;

      lat_ = 0D;

      altitude_ = 0F;

      ultrasonic_ = 0F;

      pitch_ = 0F;

      roll_ = 0F;

      yaw_ = 0F;

      airspeed_ = 0F;

      velocity_ = 0F;

      timestamp_ = 0L;

      ptpitch_ = 0F;

      ptroll_ = 0F;

      ptyaw_ = 0F;

      zoomfactor_ = 0F;

      boxSn_ = "";

      batteryPower_ = "";

      satelliteCount_ = 0;

      taskId_ = 0L;

      rtkLng_ = 0D;

      rtkLat_ = 0D;

      rtkHFSL_ = 0F;

      rtkPositionInfo_ = 0;

      airFlyTimes_ = 0;

      airFlyDistance_ = 0F;

      uavSn_ = "";

      uavModel_ = "";

      homeRange_ = 0F;

      flightMode_ = 0;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return UavStateMessageOuterClass.internal_static_com_ruoyi_web_pb_UavStateMessage_descriptor;
    }

    public UavStateMessage getDefaultInstanceForType() {
      return UavStateMessage.getDefaultInstance();
    }

    public UavStateMessage build() {
      UavStateMessage result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public UavStateMessage buildPartial() {
      UavStateMessage result = new UavStateMessage(this);
      result.lng_ = lng_;
      result.lat_ = lat_;
      result.altitude_ = altitude_;
      result.ultrasonic_ = ultrasonic_;
      result.pitch_ = pitch_;
      result.roll_ = roll_;
      result.yaw_ = yaw_;
      result.airspeed_ = airspeed_;
      result.velocity_ = velocity_;
      result.timestamp_ = timestamp_;
      result.ptpitch_ = ptpitch_;
      result.ptroll_ = ptroll_;
      result.ptyaw_ = ptyaw_;
      result.zoomfactor_ = zoomfactor_;
      result.boxSn_ = boxSn_;
      result.batteryPower_ = batteryPower_;
      result.satelliteCount_ = satelliteCount_;
      result.taskId_ = taskId_;
      result.rtkLng_ = rtkLng_;
      result.rtkLat_ = rtkLat_;
      result.rtkHFSL_ = rtkHFSL_;
      result.rtkPositionInfo_ = rtkPositionInfo_;
      result.airFlyTimes_ = airFlyTimes_;
      result.airFlyDistance_ = airFlyDistance_;
      result.uavSn_ = uavSn_;
      result.uavModel_ = uavModel_;
      result.homeRange_ = homeRange_;
      result.flightMode_ = flightMode_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof UavStateMessage) {
        return mergeFrom((UavStateMessage)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(UavStateMessage other) {
      if (other == UavStateMessage.getDefaultInstance()) return this;
      if (other.getLng() != 0D) {
        setLng(other.getLng());
      }
      if (other.getLat() != 0D) {
        setLat(other.getLat());
      }
      if (other.getAltitude() != 0F) {
        setAltitude(other.getAltitude());
      }
      if (other.getUltrasonic() != 0F) {
        setUltrasonic(other.getUltrasonic());
      }
      if (other.getPitch() != 0F) {
        setPitch(other.getPitch());
      }
      if (other.getRoll() != 0F) {
        setRoll(other.getRoll());
      }
      if (other.getYaw() != 0F) {
        setYaw(other.getYaw());
      }
      if (other.getAirspeed() != 0F) {
        setAirspeed(other.getAirspeed());
      }
      if (other.getVelocity() != 0F) {
        setVelocity(other.getVelocity());
      }
      if (other.getTimestamp() != 0L) {
        setTimestamp(other.getTimestamp());
      }
      if (other.getPtpitch() != 0F) {
        setPtpitch(other.getPtpitch());
      }
      if (other.getPtroll() != 0F) {
        setPtroll(other.getPtroll());
      }
      if (other.getPtyaw() != 0F) {
        setPtyaw(other.getPtyaw());
      }
      if (other.getZoomfactor() != 0F) {
        setZoomfactor(other.getZoomfactor());
      }
      if (!other.getBoxSn().isEmpty()) {
        boxSn_ = other.boxSn_;
        onChanged();
      }
      if (!other.getBatteryPower().isEmpty()) {
        batteryPower_ = other.batteryPower_;
        onChanged();
      }
      if (other.getSatelliteCount() != 0) {
        setSatelliteCount(other.getSatelliteCount());
      }
      if (other.getTaskId() != 0L) {
        setTaskId(other.getTaskId());
      }
      if (other.getRtkLng() != 0D) {
        setRtkLng(other.getRtkLng());
      }
      if (other.getRtkLat() != 0D) {
        setRtkLat(other.getRtkLat());
      }
      if (other.getRtkHFSL() != 0F) {
        setRtkHFSL(other.getRtkHFSL());
      }
      if (other.getRtkPositionInfo() != 0) {
        setRtkPositionInfo(other.getRtkPositionInfo());
      }
      if (other.getAirFlyTimes() != 0) {
        setAirFlyTimes(other.getAirFlyTimes());
      }
      if (other.getAirFlyDistance() != 0F) {
        setAirFlyDistance(other.getAirFlyDistance());
      }
      if (!other.getUavSn().isEmpty()) {
        uavSn_ = other.uavSn_;
        onChanged();
      }
      if (!other.getUavModel().isEmpty()) {
        uavModel_ = other.uavModel_;
        onChanged();
      }
      if (other.getHomeRange() != 0F) {
        setHomeRange(other.getHomeRange());
      }
      if (other.getFlightMode() != 0) {
        setFlightMode(other.getFlightMode());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      UavStateMessage parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (UavStateMessage) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private double lng_ ;
    /**
     * <pre>
     *经度
     * </pre>
     *
     * <code>double lng = 1;</code>
     */
    public double getLng() {
      return lng_;
    }
    /**
     * <pre>
     *经度
     * </pre>
     *
     * <code>double lng = 1;</code>
     */
    public Builder setLng(double value) {
      
      lng_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *经度
     * </pre>
     *
     * <code>double lng = 1;</code>
     */
    public Builder clearLng() {
      
      lng_ = 0D;
      onChanged();
      return this;
    }

    private double lat_ ;
    /**
     * <pre>
     *纬度
     * </pre>
     *
     * <code>double lat = 2;</code>
     */
    public double getLat() {
      return lat_;
    }
    /**
     * <pre>
     *纬度
     * </pre>
     *
     * <code>double lat = 2;</code>
     */
    public Builder setLat(double value) {
      
      lat_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *纬度
     * </pre>
     *
     * <code>double lat = 2;</code>
     */
    public Builder clearLat() {
      
      lat_ = 0D;
      onChanged();
      return this;
    }

    private float altitude_ ;
    /**
     * <pre>
     *海拔高度(椭球高)(单位:米)
     * </pre>
     *
     * <code>float altitude = 3;</code>
     */
    public float getAltitude() {
      return altitude_;
    }
    /**
     * <pre>
     *海拔高度(椭球高)(单位:米)
     * </pre>
     *
     * <code>float altitude = 3;</code>
     */
    public Builder setAltitude(float value) {
      
      altitude_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *海拔高度(椭球高)(单位:米)
     * </pre>
     *
     * <code>float altitude = 3;</code>
     */
    public Builder clearAltitude() {
      
      altitude_ = 0F;
      onChanged();
      return this;
    }

    private float ultrasonic_ ;
    /**
     * <pre>
     *相对高度(单位:米)
     * </pre>
     *
     * <code>float ultrasonic = 4;</code>
     */
    public float getUltrasonic() {
      return ultrasonic_;
    }
    /**
     * <pre>
     *相对高度(单位:米)
     * </pre>
     *
     * <code>float ultrasonic = 4;</code>
     */
    public Builder setUltrasonic(float value) {
      
      ultrasonic_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *相对高度(单位:米)
     * </pre>
     *
     * <code>float ultrasonic = 4;</code>
     */
    public Builder clearUltrasonic() {
      
      ultrasonic_ = 0F;
      onChanged();
      return this;
    }

    private float pitch_ ;
    /**
     * <pre>
     *俯仰角
     * </pre>
     *
     * <code>float pitch = 5;</code>
     */
    public float getPitch() {
      return pitch_;
    }
    /**
     * <pre>
     *俯仰角
     * </pre>
     *
     * <code>float pitch = 5;</code>
     */
    public Builder setPitch(float value) {
      
      pitch_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *俯仰角
     * </pre>
     *
     * <code>float pitch = 5;</code>
     */
    public Builder clearPitch() {
      
      pitch_ = 0F;
      onChanged();
      return this;
    }

    private float roll_ ;
    /**
     * <pre>
     *横滚角
     * </pre>
     *
     * <code>float roll = 6;</code>
     */
    public float getRoll() {
      return roll_;
    }
    /**
     * <pre>
     *横滚角
     * </pre>
     *
     * <code>float roll = 6;</code>
     */
    public Builder setRoll(float value) {
      
      roll_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *横滚角
     * </pre>
     *
     * <code>float roll = 6;</code>
     */
    public Builder clearRoll() {
      
      roll_ = 0F;
      onChanged();
      return this;
    }

    private float yaw_ ;
    /**
     * <pre>
     *偏航角
     * </pre>
     *
     * <code>float yaw = 7;</code>
     */
    public float getYaw() {
      return yaw_;
    }
    /**
     * <pre>
     *偏航角
     * </pre>
     *
     * <code>float yaw = 7;</code>
     */
    public Builder setYaw(float value) {
      
      yaw_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *偏航角
     * </pre>
     *
     * <code>float yaw = 7;</code>
     */
    public Builder clearYaw() {
      
      yaw_ = 0F;
      onChanged();
      return this;
    }

    private float airspeed_ ;
    /**
     * <pre>
     *空速(单位:米/秒)
     * </pre>
     *
     * <code>float airspeed = 8;</code>
     */
    public float getAirspeed() {
      return airspeed_;
    }
    /**
     * <pre>
     *空速(单位:米/秒)
     * </pre>
     *
     * <code>float airspeed = 8;</code>
     */
    public Builder setAirspeed(float value) {
      
      airspeed_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *空速(单位:米/秒)
     * </pre>
     *
     * <code>float airspeed = 8;</code>
     */
    public Builder clearAirspeed() {
      
      airspeed_ = 0F;
      onChanged();
      return this;
    }

    private float velocity_ ;
    /**
     * <pre>
     *地速(单位:米/秒)
     * </pre>
     *
     * <code>float velocity = 9;</code>
     */
    public float getVelocity() {
      return velocity_;
    }
    /**
     * <pre>
     *地速(单位:米/秒)
     * </pre>
     *
     * <code>float velocity = 9;</code>
     */
    public Builder setVelocity(float value) {
      
      velocity_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *地速(单位:米/秒)
     * </pre>
     *
     * <code>float velocity = 9;</code>
     */
    public Builder clearVelocity() {
      
      velocity_ = 0F;
      onChanged();
      return this;
    }

    private long timestamp_ ;
    /**
     * <pre>
     *时间戳
     * </pre>
     *
     * <code>uint64 timestamp = 10;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }
    /**
     * <pre>
     *时间戳
     * </pre>
     *
     * <code>uint64 timestamp = 10;</code>
     */
    public Builder setTimestamp(long value) {
      
      timestamp_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *时间戳
     * </pre>
     *
     * <code>uint64 timestamp = 10;</code>
     */
    public Builder clearTimestamp() {
      
      timestamp_ = 0L;
      onChanged();
      return this;
    }

    private float ptpitch_ ;
    /**
     * <pre>
     *载荷俯仰角
     * </pre>
     *
     * <code>float ptpitch = 11;</code>
     */
    public float getPtpitch() {
      return ptpitch_;
    }
    /**
     * <pre>
     *载荷俯仰角
     * </pre>
     *
     * <code>float ptpitch = 11;</code>
     */
    public Builder setPtpitch(float value) {
      
      ptpitch_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *载荷俯仰角
     * </pre>
     *
     * <code>float ptpitch = 11;</code>
     */
    public Builder clearPtpitch() {
      
      ptpitch_ = 0F;
      onChanged();
      return this;
    }

    private float ptroll_ ;
    /**
     * <pre>
     *载荷横滚角
     * </pre>
     *
     * <code>float ptroll = 12;</code>
     */
    public float getPtroll() {
      return ptroll_;
    }
    /**
     * <pre>
     *载荷横滚角
     * </pre>
     *
     * <code>float ptroll = 12;</code>
     */
    public Builder setPtroll(float value) {
      
      ptroll_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *载荷横滚角
     * </pre>
     *
     * <code>float ptroll = 12;</code>
     */
    public Builder clearPtroll() {
      
      ptroll_ = 0F;
      onChanged();
      return this;
    }

    private float ptyaw_ ;
    /**
     * <pre>
     *载荷航向角
     * </pre>
     *
     * <code>float ptyaw = 13;</code>
     */
    public float getPtyaw() {
      return ptyaw_;
    }
    /**
     * <pre>
     *载荷航向角
     * </pre>
     *
     * <code>float ptyaw = 13;</code>
     */
    public Builder setPtyaw(float value) {
      
      ptyaw_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *载荷航向角
     * </pre>
     *
     * <code>float ptyaw = 13;</code>
     */
    public Builder clearPtyaw() {
      
      ptyaw_ = 0F;
      onChanged();
      return this;
    }

    private float zoomfactor_ ;
    /**
     * <pre>
     *载荷当前倍数
     * </pre>
     *
     * <code>float zoomfactor = 14;</code>
     */
    public float getZoomfactor() {
      return zoomfactor_;
    }
    /**
     * <pre>
     *载荷当前倍数
     * </pre>
     *
     * <code>float zoomfactor = 14;</code>
     */
    public Builder setZoomfactor(float value) {
      
      zoomfactor_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *载荷当前倍数
     * </pre>
     *
     * <code>float zoomfactor = 14;</code>
     */
    public Builder clearZoomfactor() {
      
      zoomfactor_ = 0F;
      onChanged();
      return this;
    }

    private Object boxSn_ = "";
    /**
     * <pre>
     *云盒子编号
     * </pre>
     *
     * <code>string boxSn = 15;</code>
     */
    public String getBoxSn() {
      Object ref = boxSn_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        boxSn_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     *云盒子编号
     * </pre>
     *
     * <code>string boxSn = 15;</code>
     */
    public com.google.protobuf.ByteString
        getBoxSnBytes() {
      Object ref = boxSn_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        boxSn_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *云盒子编号
     * </pre>
     *
     * <code>string boxSn = 15;</code>
     */
    public Builder setBoxSn(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      boxSn_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *云盒子编号
     * </pre>
     *
     * <code>string boxSn = 15;</code>
     */
    public Builder clearBoxSn() {
      
      boxSn_ = getDefaultInstance().getBoxSn();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *云盒子编号
     * </pre>
     *
     * <code>string boxSn = 15;</code>
     */
    public Builder setBoxSnBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      boxSn_ = value;
      onChanged();
      return this;
    }

    private Object batteryPower_ = "";
    /**
     * <pre>
     *电池电量,多个电池以下划线分割,如：80_60
     * </pre>
     *
     * <code>string batteryPower = 16;</code>
     */
    public String getBatteryPower() {
      Object ref = batteryPower_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        batteryPower_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     *电池电量,多个电池以下划线分割,如：80_60
     * </pre>
     *
     * <code>string batteryPower = 16;</code>
     */
    public com.google.protobuf.ByteString
        getBatteryPowerBytes() {
      Object ref = batteryPower_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        batteryPower_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *电池电量,多个电池以下划线分割,如：80_60
     * </pre>
     *
     * <code>string batteryPower = 16;</code>
     */
    public Builder setBatteryPower(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      batteryPower_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *电池电量,多个电池以下划线分割,如：80_60
     * </pre>
     *
     * <code>string batteryPower = 16;</code>
     */
    public Builder clearBatteryPower() {
      
      batteryPower_ = getDefaultInstance().getBatteryPower();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *电池电量,多个电池以下划线分割,如：80_60
     * </pre>
     *
     * <code>string batteryPower = 16;</code>
     */
    public Builder setBatteryPowerBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      batteryPower_ = value;
      onChanged();
      return this;
    }

    private int satelliteCount_ ;
    /**
     * <pre>
     *卫星计数
     * </pre>
     *
     * <code>uint32 satelliteCount = 17;</code>
     */
    public int getSatelliteCount() {
      return satelliteCount_;
    }
    /**
     * <pre>
     *卫星计数
     * </pre>
     *
     * <code>uint32 satelliteCount = 17;</code>
     */
    public Builder setSatelliteCount(int value) {
      
      satelliteCount_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *卫星计数
     * </pre>
     *
     * <code>uint32 satelliteCount = 17;</code>
     */
    public Builder clearSatelliteCount() {
      
      satelliteCount_ = 0;
      onChanged();
      return this;
    }

    private long taskId_ ;
    /**
     * <pre>
     *任务编号
     * </pre>
     *
     * <code>uint64 taskId = 18;</code>
     */
    public long getTaskId() {
      return taskId_;
    }
    /**
     * <pre>
     *任务编号
     * </pre>
     *
     * <code>uint64 taskId = 18;</code>
     */
    public Builder setTaskId(long value) {
      
      taskId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *任务编号
     * </pre>
     *
     * <code>uint64 taskId = 18;</code>
     */
    public Builder clearTaskId() {
      
      taskId_ = 0L;
      onChanged();
      return this;
    }

    private double rtkLng_ ;
    /**
     * <pre>
     *rtk经度
     * </pre>
     *
     * <code>double rtkLng = 19;</code>
     */
    public double getRtkLng() {
      return rtkLng_;
    }
    /**
     * <pre>
     *rtk经度
     * </pre>
     *
     * <code>double rtkLng = 19;</code>
     */
    public Builder setRtkLng(double value) {
      
      rtkLng_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *rtk经度
     * </pre>
     *
     * <code>double rtkLng = 19;</code>
     */
    public Builder clearRtkLng() {
      
      rtkLng_ = 0D;
      onChanged();
      return this;
    }

    private double rtkLat_ ;
    /**
     * <pre>
     *rtk纬度
     * </pre>
     *
     * <code>double rtkLat = 20;</code>
     */
    public double getRtkLat() {
      return rtkLat_;
    }
    /**
     * <pre>
     *rtk纬度
     * </pre>
     *
     * <code>double rtkLat = 20;</code>
     */
    public Builder setRtkLat(double value) {
      
      rtkLat_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *rtk纬度
     * </pre>
     *
     * <code>double rtkLat = 20;</code>
     */
    public Builder clearRtkLat() {
      
      rtkLat_ = 0D;
      onChanged();
      return this;
    }

    private float rtkHFSL_ ;
    /**
     * <pre>
     *rtk海拔高度(平均海平面高度)(单位:米)
     * </pre>
     *
     * <code>float rtkHFSL = 21;</code>
     */
    public float getRtkHFSL() {
      return rtkHFSL_;
    }
    /**
     * <pre>
     *rtk海拔高度(平均海平面高度)(单位:米)
     * </pre>
     *
     * <code>float rtkHFSL = 21;</code>
     */
    public Builder setRtkHFSL(float value) {
      
      rtkHFSL_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *rtk海拔高度(平均海平面高度)(单位:米)
     * </pre>
     *
     * <code>float rtkHFSL = 21;</code>
     */
    public Builder clearRtkHFSL() {
      
      rtkHFSL_ = 0F;
      onChanged();
      return this;
    }

    private int rtkPositionInfo_ ;
    /**
     * <pre>
     *rtk状态(值为50时[rtk数据fix固定解]，rtk的经纬度及海拔高度值可用)
     * </pre>
     *
     * <code>uint32 rtkPositionInfo = 22;</code>
     */
    public int getRtkPositionInfo() {
      return rtkPositionInfo_;
    }
    /**
     * <pre>
     *rtk状态(值为50时[rtk数据fix固定解]，rtk的经纬度及海拔高度值可用)
     * </pre>
     *
     * <code>uint32 rtkPositionInfo = 22;</code>
     */
    public Builder setRtkPositionInfo(int value) {
      
      rtkPositionInfo_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *rtk状态(值为50时[rtk数据fix固定解]，rtk的经纬度及海拔高度值可用)
     * </pre>
     *
     * <code>uint32 rtkPositionInfo = 22;</code>
     */
    public Builder clearRtkPositionInfo() {
      
      rtkPositionInfo_ = 0;
      onChanged();
      return this;
    }

    private int airFlyTimes_ ;
    /**
     * <pre>
     *当前架次飞行时长(单位:秒)
     * </pre>
     *
     * <code>uint32 airFlyTimes = 23;</code>
     */
    public int getAirFlyTimes() {
      return airFlyTimes_;
    }
    /**
     * <pre>
     *当前架次飞行时长(单位:秒)
     * </pre>
     *
     * <code>uint32 airFlyTimes = 23;</code>
     */
    public Builder setAirFlyTimes(int value) {
      
      airFlyTimes_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *当前架次飞行时长(单位:秒)
     * </pre>
     *
     * <code>uint32 airFlyTimes = 23;</code>
     */
    public Builder clearAirFlyTimes() {
      
      airFlyTimes_ = 0;
      onChanged();
      return this;
    }

    private float airFlyDistance_ ;
    /**
     * <pre>
     *当前架次飞行实际距离(单位:米)
     * </pre>
     *
     * <code>float airFlyDistance = 24;</code>
     */
    public float getAirFlyDistance() {
      return airFlyDistance_;
    }
    /**
     * <pre>
     *当前架次飞行实际距离(单位:米)
     * </pre>
     *
     * <code>float airFlyDistance = 24;</code>
     */
    public Builder setAirFlyDistance(float value) {
      
      airFlyDistance_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *当前架次飞行实际距离(单位:米)
     * </pre>
     *
     * <code>float airFlyDistance = 24;</code>
     */
    public Builder clearAirFlyDistance() {
      
      airFlyDistance_ = 0F;
      onChanged();
      return this;
    }

    private Object uavSn_ = "";
    /**
     * <pre>
     *无人机编号
     * </pre>
     *
     * <code>string uavSn = 25;</code>
     */
    public String getUavSn() {
      Object ref = uavSn_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        uavSn_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     *无人机编号
     * </pre>
     *
     * <code>string uavSn = 25;</code>
     */
    public com.google.protobuf.ByteString
        getUavSnBytes() {
      Object ref = uavSn_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        uavSn_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *无人机编号
     * </pre>
     *
     * <code>string uavSn = 25;</code>
     */
    public Builder setUavSn(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      uavSn_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *无人机编号
     * </pre>
     *
     * <code>string uavSn = 25;</code>
     */
    public Builder clearUavSn() {
      
      uavSn_ = getDefaultInstance().getUavSn();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *无人机编号
     * </pre>
     *
     * <code>string uavSn = 25;</code>
     */
    public Builder setUavSnBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      uavSn_ = value;
      onChanged();
      return this;
    }

    private Object uavModel_ = "";
    /**
     * <pre>
     *无人机型号
     * </pre>
     *
     * <code>string uavModel = 26;</code>
     */
    public String getUavModel() {
      Object ref = uavModel_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        uavModel_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     *无人机型号
     * </pre>
     *
     * <code>string uavModel = 26;</code>
     */
    public com.google.protobuf.ByteString
        getUavModelBytes() {
      Object ref = uavModel_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        uavModel_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *无人机型号
     * </pre>
     *
     * <code>string uavModel = 26;</code>
     */
    public Builder setUavModel(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      uavModel_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *无人机型号
     * </pre>
     *
     * <code>string uavModel = 26;</code>
     */
    public Builder clearUavModel() {
      
      uavModel_ = getDefaultInstance().getUavModel();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *无人机型号
     * </pre>
     *
     * <code>string uavModel = 26;</code>
     */
    public Builder setUavModelBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      uavModel_ = value;
      onChanged();
      return this;
    }

    private float homeRange_ ;
    /**
     * <pre>
     *距降落点距离(单位:米)
     * </pre>
     *
     * <code>float homeRange = 27;</code>
     */
    public float getHomeRange() {
      return homeRange_;
    }
    /**
     * <pre>
     *距降落点距离(单位:米)
     * </pre>
     *
     * <code>float homeRange = 27;</code>
     */
    public Builder setHomeRange(float value) {
      
      homeRange_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *距降落点距离(单位:米)
     * </pre>
     *
     * <code>float homeRange = 27;</code>
     */
    public Builder clearHomeRange() {
      
      homeRange_ = 0F;
      onChanged();
      return this;
    }

    private int flightMode_ ;
    /**
     * <pre>
     *飞行模式：1=手动控制模式，2=姿态模式，6=MODE_P_GPS，9=热点任务中，11=自动起飞中，12=降落中，14=航线中，15=返航中，17=虚拟摇杆控制中，33=强制降落中，41=解锁电机准备起飞中
     * </pre>
     *
     * <code>uint32 flightMode = 28;</code>
     */
    public int getFlightMode() {
      return flightMode_;
    }
    /**
     * <pre>
     *飞行模式：1=手动控制模式，2=姿态模式，6=MODE_P_GPS，9=热点任务中，11=自动起飞中，12=降落中，14=航线中，15=返航中，17=虚拟摇杆控制中，33=强制降落中，41=解锁电机准备起飞中
     * </pre>
     *
     * <code>uint32 flightMode = 28;</code>
     */
    public Builder setFlightMode(int value) {
      
      flightMode_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *飞行模式：1=手动控制模式，2=姿态模式，6=MODE_P_GPS，9=热点任务中，11=自动起飞中，12=降落中，14=航线中，15=返航中，17=虚拟摇杆控制中，33=强制降落中，41=解锁电机准备起飞中
     * </pre>
     *
     * <code>uint32 flightMode = 28;</code>
     */
    public Builder clearFlightMode() {
      
      flightMode_ = 0;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:com.ruoyi.web.pb.UavStateMessage)
  }

  // @@protoc_insertion_point(class_scope:com.ruoyi.web.pb.UavStateMessage)
  private static final UavStateMessage DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new UavStateMessage();
  }

  public static UavStateMessage getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<UavStateMessage>
      PARSER = new com.google.protobuf.AbstractParser<UavStateMessage>() {
    public UavStateMessage parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new UavStateMessage(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<UavStateMessage> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<UavStateMessage> getParserForType() {
    return PARSER;
  }

  public UavStateMessage getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

